mynet <- memmott1999
rand_ext_list <- sample(rownames(mynet))
node_deg <- degreedistr(mynet)
node_deg <- ND(mynet)
View(node_deg)
node_deg <- ND(mynet)[[1]]
node_deg <- ND(mynet)
View(node_deg)
ND(mynet)[[1]]
node_deg <- ND(mynet)[[1]]
mode_deg
node_deg
deg_ext_list <- order(node_deg)
deg_ext_list <- names(node_deg[order(node_deg, decreasing = T)])
node_deg
deg_ext_list <- names(node_deg[order(node_deg, decreasing = T)])
deg_ext_list
# Clear workspace
rm(list=ls())
# Load packages
library(tidyverse) # package version:'1.2.1'
library(ggplot2) # package version '3.2.1'
library(ggsci) # package version:'2.9' - this for journal-ready colour schemes
install.packages("viridis")
# Packages and setup ------------------------------------------------------
sessionInfo()
# Clear workspace
rm(list=ls())
# Load packages
library(tidyverse) # package version:'1.2.1'
library(ggsci) # package version:'2.9'
library(viridis) # package version: '0.5.1'
dframe1 <- read.csv(file.choose()) #select "Jams_etal_DATA.csv"
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
plot(model1)
summary(model1)
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
# Predictions for plotting
pdat <- expand.grid(animal_body_length_mm = seq(9,10340,0.5))
pred <- predict(model1, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence")
pred1 <- predict(model1, newdata = pdat, se.fit = T, level = 0.99, interval = "confidence")
predframe <- data.frame(preds = pred$fit, se = pred$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
predframe1 <- data.frame(preds = pred1$fit, se = pred1$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
#rename a column
dframe1<-rename(dframe1, n_pooledorganisms = longest.ingested.plastic.size.data_.is.for.how.many.pooled.organisms._i.e..the.number.of.organisms.that.contained.plastic.dicounting.those.that.did.not.include.plastic)
names(dframe1)
# Relevel data
dframe1$group <- ordered(dframe1$group, levels = c("Invertebrates", "Reptiles","Mammals","Fishes"))
# assign numeric
dframe1$n_pooledorganisms <- as.numeric(as.character(dframe1$n_pooledorganisms))
# Figure 1a
plot1 <- ggplot(aes(x = log10(animal_body_length_mm), y = log10(longest_ingested_plastic_mm)), data = dframe1) +
#geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
#            data = predframe, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe1, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
scale_color_npg() +
geom_point(aes(color=group, size=n_pooledorganisms)) +
scale_size(range = c(2.5, 11))+
geom_line(aes(x = log10(animal_body_length_mm), y = preds.fit), data = predframe, cex = 0.8) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.background = element_rect(colour = "black", size = 0.6),
legend.position = "bottom", legend.title = element_blank(), legend.box = "vertical",
panel.grid = element_blank(),
legend.background = element_rect(colour = "black", fill = 'NA')) +
theme(text = element_text(size = 14), axis.text = element_text(colour = "black")) +
xlab("Animal body length (mm)") +
ylab("Longest ingested plastic (mm)") +
scale_x_continuous(labels = c(10,100,1000,10000), breaks = c(1,2,3,4)) +
scale_y_continuous(labels = c(0.1,1,10,100,1000,10000), breaks = c(-1,0,1,2,3,4)) +
coord_cartesian(xlim = c(1,4), ylim = c(-1,3)) +
ggtitle("") +
annotation_logticks(scaled = TRUE, base = 10)
plot1
# Figure 1a
plot1 <- ggplot(aes(x = log10(animal_body_length_mm), y = log10(longest_ingested_plastic_mm)), data = dframe1) +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
#geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
#            data = predframe1, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
scale_color_npg() +
geom_point(aes(color=group, size=n_pooledorganisms)) +
scale_size(range = c(2.5, 11))+
geom_line(aes(x = log10(animal_body_length_mm), y = preds.fit), data = predframe, cex = 0.8) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.background = element_rect(colour = "black", size = 0.6),
legend.position = "bottom", legend.title = element_blank(), legend.box = "vertical",
panel.grid = element_blank(),
legend.background = element_rect(colour = "black", fill = 'NA')) +
theme(text = element_text(size = 14), axis.text = element_text(colour = "black")) +
xlab("Animal body length (mm)") +
ylab("Longest ingested plastic (mm)") +
scale_x_continuous(labels = c(10,100,1000,10000), breaks = c(1,2,3,4)) +
scale_y_continuous(labels = c(0.1,1,10,100,1000,10000), breaks = c(-1,0,1,2,3,4)) +
coord_cartesian(xlim = c(1,4), ylim = c(-1,3)) +
ggtitle("") +
annotation_logticks(scaled = TRUE, base = 10)
plot1
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
summary(model1)
dframe2 <- select(dframe1, species_binomial, group, max_depth_range_.m.)
dframe2 <- arrange(dframe2, species_binomial)
dframe2 <- distinct(dframe2, species_binomial, .keep_all= TRUE)
dframe2$max_depth_range_.m._numeric <- as.numeric(as.character(dframe2$max_depth_range_.m.))
dframe2 <- arrange(dframe2, max_depth_range_.m._numeric)
dframe2<-
dframe2 %>%
drop_na(max_depth_range_.m._numeric)
dframe2 <- add_row(dframe2, species_binomial = "CÃ³zar et al. 2014",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
dframe2<- add_row(dframe2, species_binomial = "Eriksen et al. 2014",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
dframe2 <- add_row(dframe2, species_binomial = "van Sebille et al. 2015",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
head(dframe2)
dframe2$group <- ordered(dframe2$group,
levels = c("Global plastic distribution models", "Invertebrates", "Mammals", "Reptiles", "Fishes"))
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_npg()+ #npg = nature publishing group inspired colour scheme
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis()+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T)+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
dframe3<-select(dframe1, species_binomial, animal_body_length_mm,
shortest_ingested_plastic_mm, magnification_used)
head(dframe3)
dframe3$magnification_used <- ordered(dframe3$magnification_used,
levels = c( "Not reported or inferable", "Naked eye", "Stereomicroscope", "Stereomicroscope and compound microscope"))
model2 <- lm(log10(shortest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data= dframe3)
plot(model2)
model2 <- lm(log10(shortest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data= dframe3)
pdat <- expand.grid(animal_body_length_mm = seq(9,10340,0.5))
pred <- predict(model2, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence")
pred1 <- predict(model2, newdata = pdat, se.fit = T, level = 0.99, interval = "confidence")
predframe <- data.frame(preds = pred$fit, se = pred$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
predframe1 <- data.frame(preds = pred1$fit, se = pred1$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
#plot
plot.detection.limit <- ggplot(aes(x = log10(animal_body_length_mm), y = log10(shortest_ingested_plastic_mm)),
data = dframe3) +
geom_point(aes(fill = magnification_used), cex = 3, pch = 21, colour = "black") +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe1, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
geom_line(aes(x = log10(animal_body_length_mm), y = preds.fit), data = predframe, cex = 0.8) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.background = element_rect(colour = "black", size = 0.6),
legend.position = "", legend.title = element_blank(),
panel.grid = element_blank(),
legend.background = element_rect(colour = "black", fill = 'NA')) +
theme(text = element_text(size = 14), axis.text = element_text(colour = "black")) +
xlab("Animal length (mm)") +
ylab("Smallest ingested plastic (mm)") +
scale_x_continuous(labels = c(10,100,1000,10000), breaks = c(1,2,3,4)) +
scale_y_continuous(labels = c(0.1,1,10,100,1000), breaks = c(-1,0,1,2,3)) +
coord_cartesian(xlim = c(1,4), ylim = c(-1,3)) +
#scale_fill_npg() +
ggtitle("") +
annotation_logticks(scaled = TRUE, base = 10)+
theme_classic()+
theme(legend.position = c(0.27, 0.885))+
theme(legend.title = element_blank())
plot.detection.limit
#plot
plot.detection.limit <- ggplot(aes(x = log10(animal_body_length_mm), y = log10(shortest_ingested_plastic_mm)),
data = dframe3) +
geom_point(aes(fill = magnification_used), cex = 3, pch = 21, colour = "black") +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
geom_ribbon(aes(x = log10(animal_body_length_mm), ymin = preds.lwr, ymax = preds.upr),
data = predframe1, fill = "black", inherit.aes = FALSE, alpha = 0.12) +
geom_line(aes(x = log10(animal_body_length_mm), y = preds.fit), data = predframe, cex = 0.8) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.background = element_rect(colour = "black", size = 0.6),
legend.position = "", legend.title = element_blank(),
panel.grid = element_blank(),
legend.background = element_rect(colour = "black", fill = 'NA')) +
theme(text = element_text(size = 14), axis.text = element_text(colour = "black")) +
xlab("Animal length (mm)") +
ylab("Smallest ingested plastic (mm)") +
scale_x_continuous(labels = c(10,100,1000,10000), breaks = c(1,2,3,4)) +
scale_y_continuous(labels = c(0.1,1,10,100,1000), breaks = c(-1,0,1,2,3)) +
coord_cartesian(xlim = c(1,4), ylim = c(-1,3)) +
scale_fill_viridis(discrete = T) +
ggtitle("") +
annotation_logticks(scaled = TRUE, base = 10)+
theme_classic()+
theme(legend.position = c(0.27, 0.885))+
theme(legend.title = element_blank())
plot.detection.limit
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T)+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T)+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, option = "A")+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, option = "B")+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, option = "C")+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, option = "E")+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, option = "A")+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
View(dframe3)
View(dframe2)
# Clear workspace
rm(list=ls())
# Load packages
library(tidyverse) # package version:'1.2.1'
library(ggsci) # package version:'2.9'
library(viridis) # package version: '0.5.1'
dframe1 <- read.csv(file.choose()) #select "Jams_etal_DATA.csv"
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
plot(model1)
# Predictions for plotting
pdat <- expand.grid(animal_body_length_mm = seq(9,10340,0.5))
pred <- predict(model1, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence")
pred1 <- predict(model1, newdata = pdat, se.fit = T, level = 0.99, interval = "confidence")
predframe <- data.frame(preds = pred$fit, se = pred$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
predframe1 <- data.frame(preds = pred1$fit, se = pred1$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
nperms = 1000 # number of random subsets of data
output = list(NULL)
for (i in 1:nperms) { # sequentially select subsets of the data for analysis
sub <- sample(nrow(dframe1),(round(nrow(dframe1)*0.1,0))) # randomly sample ~10% of the data
val <- dframe1[sub,] # create a validation dataset (the validation data)
obs <- dframe1[-sub,] # remove the data from the intial database (the parameterisation data)
lm <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = obs) # model constructed based on the parameterisation data
pdat <- expand.grid(animal_body_length_mm = val$animal_body_length_mm) # set validation data for predictions
pred <- predict(lm, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence") # use linear model to predict values for validation data
predframe <- data.frame(preds = (10^pred$fit), se = pred$se.fit, animal.body.length.mm = pdat$animal_body_length_mm) # store results in a sensible way
output[[i]] <- cbind(predframe[-4], val$longest_ingested_plastic_mm)
}
outputs <- bind_rows(output, .id = "ID")
# Compare the predictions versus the observations in a linear regression (preds vs. obs)
plot <- ggplot(aes(x = log10(`val$longest_ingested_plastic_mm`), y = log10(preds.fit)), data = outputs) +
geom_point(alpha = 0.1, size = 3) +
theme_bw() +
theme(plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
panel.background = element_rect(colour = "black", size = 0.6),
legend.position = "bottom", legend.title = element_blank(), legend.box = "vertical",
panel.grid = element_blank(),
legend.background = element_rect(colour = "black", fill = 'NA')) +
theme(text = element_text(size = 14), axis.text = element_text(colour = "black")) +
coord_cartesian(xlim = c(-1,3), ylim = c(-1,3)) +
scale_y_continuous(labels = c(0.1,1,10,100,1000)) +
scale_x_continuous(labels = c(0.1,1,10,100,1000)) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed") +
ylab("Predicted maximum plastic length (mm)") +
xlab("Observed maximum plastic length (mm)")
plot
## Statistics on the predictions
rmse <- rmse(log10(outputs$`val$longest_ingested_plastic_mm`), log10(outputs$preds.fit))
comparison <- lm(log10(`val$longest_ingested_plastic_mm`) ~ log10(preds.fit), data = outputs)
plot(comparison)
# Proportion of observed values falling within the confidence intervals of the equation
for (i in length(outputs)) {
if (outputs[i,]$`val$longest_ingested_plastic_mm` > outputs[i,]$preds.lwr && outputs[i,]$`val$longest_ingested_plastic_mm` < outputs[i,]$preds.upr){
outputs[i,]$in_Cis <- 1 }
}
outputs <- bind_rows(output, .id = "ID")
View(output)
View(outputs)
# Proportion of observed values falling within the confidence intervals of the equation
for (i in length(outputs)) {
if (outputs[i,]$`val$longest_ingested_plastic_mm` > outputs[i,]$preds.lwr && outputs[i,]$`val$longest_ingested_plastic_mm` < outputs[i,]$preds.upr){
outputs[i,]$in_Cis <- 1 }
}
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
# Predictions for plotting
pdat <- expand.grid(animal_body_length_mm = seq(9,10340,0.5))
pred <- predict(model1, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence")
pred1 <- predict(model1, newdata = pdat, se.fit = T, level = 0.99, interval = "confidence")
predframe <- data.frame(preds = pred$fit, se = pred$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
predframe1 <- data.frame(preds = pred1$fit, se = pred1$se.fit, animal_body_length_mm = pdat$animal_body_length_mm)
# Rename a column
dframe1<-rename(dframe1, n_pooledorganisms = longest.ingested.plastic.size.data_.is.for.how.many.pooled.organisms._i.e..the.number.of.organisms.that.contained.plastic.dicounting.those.that.did.not.include.plastic)
names(dframe1)
# Relevel data
dframe1$group <- ordered(dframe1$group, levels = c("Invertebrates", "Reptiles","Mammals","Fishes"))
# Assign numeric
dframe1$n_pooledorganisms <- as.numeric(as.character(dframe1$n_pooledorganisms))
nperms = 1000 # number of random subsets of data
output = list(NULL)
for (i in 1:nperms) { # sequentially select subsets of the data for analysis
sub <- sample(nrow(dframe1),(round(nrow(dframe1)*0.1,0))) # randomly sample ~10% of the data
val <- dframe1[sub,] # create a validation dataset (the validation data)
obs <- dframe1[-sub,] # remove the data from the intial database (the parameterisation data)
lm <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = obs) # model constructed based on the parameterisation data
pdat <- expand.grid(animal_body_length_mm = val$animal_body_length_mm) # set validation data for predictions
pred <- predict(lm, newdata = pdat, se.fit = T, level = 0.95, interval = "confidence") # use linear model to predict values for validation data
predframe <- data.frame(preds = (10^pred$fit), se = pred$se.fit, animal.body.length.mm = pdat$animal_body_length_mm) # store results in a sensible way
output[[i]] <- cbind(predframe[-4], val$longest_ingested_plastic_mm)
}
outputs <- bind_rows(output, .id = "ID")
View(outputs)
# Proportion of observed values falling within the confidence intervals of the equation
for (i in length(outputs)) {
if (outputs[i,]$`val$longest_ingested_plastic_mm` > outputs[i,]$preds.lwr && outputs[i,]$`val$longest_ingested_plastic_mm` < outputs[i,]$preds.upr){
outputs[i,]$in_Cis <- 1 }
}
outputs$in_Cis <- NULL
View(outputs)
outputs$in_Cis <- rep(NULL, nrow(outputs))
View(outputs)
outputs <- bind_rows(output, .id = "ID")
outputs$in_Cis <- rep(NULL, nrow(outputs))
rm(list=ls())
# Clear workspace
rm(list=ls())
# Load packages
library(tidyverse) # package version:'1.2.1'
library(ggsci) # package version:'2.9'
library(viridis) # package version: '0.5.1'
library(Metrics) # package version: '0.1.4'
dframe1 <- read.csv(file.choose()) #select "Jams_etal_DATA.csv"
# Linear regression
model1 <- lm(log10(longest_ingested_plastic_mm) ~ log10(animal_body_length_mm), data = dframe1, na.action = na.omit)
dframe2 <- select(dframe1, species_binomial, group, max_depth_range_.m.)
dframe2 <- arrange(dframe2, species_binomial)
dframe2 <- distinct(dframe2, species_binomial, .keep_all= TRUE)
dframe2$max_depth_range_.m._numeric <- as.numeric(as.character(dframe2$max_depth_range_.m.))
dframe2 <- arrange(dframe2, max_depth_range_.m._numeric)
dframe2<-
dframe2 %>%
drop_na(max_depth_range_.m._numeric)
dframe2 <- add_row(dframe2, species_binomial = "CÃ³zar et al. 2014",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
dframe2<- add_row(dframe2, species_binomial = "Eriksen et al. 2014",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
dframe2 <- add_row(dframe2, species_binomial = "van Sebille et al. 2015",
max_depth_range_.m._numeric = 25, group = "Global plastic distribution models")
head(dframe2)
dframe2$group <- ordered(dframe2$group,
levels = c("Global plastic distribution models", "Invertebrates", "Mammals", "Reptiles", "Fishes"))
plot1<-ggplot(dframe2, aes(x=reorder(species_binomial, -max_depth_range_.m._numeric), y=max_depth_range_.m._numeric, fill=group)) +
geom_bar(stat="identity") +
scale_y_reverse()+
theme_classic()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
scale_fill_viridis(discrete = T, direction = -1)+
labs(title = "", x = "", y = "Maximum depth range (m)", fill = "")+ #fill = legend
theme(legend.position = c(0.705, 0.365))+
ggtitle("")
plot1
setwd("C:/Users/nfw24/OneDrive - Newcastle University/Github/searching-for-motifs")
planilla<-read.table("tabla_total28f.csv", sep=",",header=T)
#by Field selection
by.field<-planilla[planilla$Field=="543",]###voy cambiando numero aca
#Select herbivoty + parasitoidism interations togheter
INT<-by.field[by.field$interaction_type=="herbivory" |  by.field$interaction_type=="parasitoidism",]
head(INT)
####Detecting soybean (pl1)-herbivore interactions
herbi.soja<-function(INT){
level.superior<-NULL
por.fila<-length(INT[,3])
for(i in 1:por.fila){
if (INT[i,"lower.taxon"]=="pl1"){
up.tax<- INT[i,"upper.taxon"]
level.superior[i]<-as.character(up.tax)
}else{
level.superior[i]<-"no"
}
}
return(level.superior)
}
herb_en_motif<-data.frame(herbi.soja(INT))
herb_en_motif2<-cbind(INT$lower.taxon, herb_en_motif,INT$weight)
herb_en_motif1<-data.frame(herb_en_motif2[herb_en_motif2$herbi.soja.INT != "no",])#me devuelve un subset de datos con las int
colnames(herb_en_motif1)<-c("low.level","high.level","weight")
herb_en_motif1 ##LEPI 1 ASOCIADOS A SOJA
## This could be shortened to this:
herb_en_motif_alt <- INT[INT$lower.taxon == "pl1",]
herb_en_motif_alt <- herb_en_motif_alt[c(2,3,7)]
herb_en_motif_alt
####
###herbiv soja (L1)-parasitoid
parasitoides<-function(INT,k){
level.3<-NULL
por.fila<-length(INT[,1])
for(i in 1:por.fila){
if (INT[i,"lower.taxon"]==as.character(k)){
up.tax<- INT[i,"upper.taxon"]
level.3[i]<-as.character(up.tax)
}else{
level.3[i]<-"no"
}
}
return(level.3)
}
#insects associated to soybean crop
amigos<-as.character(herb_en_motif1[,2])#insects participando de motifs
amigos
#function including parasitoides function (for each partner insect in soybea crop...)
total1<-function(INT,amigos){
final<-matrix(NA,nrow(INT),length(amigos))
for (j in 1:length(amigos)){ #para cada companero de soja
k<-amigos[j]
final[,j]<-parasitoides(INT,k)#busco sus plantas compa;eras de borde
}
return(final)
}
matriz.compas<-total1(INT,amigos)####PARASITOIDES ASOCIADOS A LEPI1
colnames(matriz.compas)=amigos
matriz.compas ###
colnames(matriz.compas)=amigos
matriz.compas ###
amigos2<-as.vector(matriz.compas)
amigos2.1<-unique(amigos2[amigos2!="no"])
L1.parasitoid<-NULL
aa<-ncol(matriz.compas)
i=1
bb<-cbind(as.character(INT[,"lower.taxon"]),matriz.compas[,i],INT[,"weight"])
View(bb)
L1.para<-data.frame(bb)
View(L1.para)
colnames(L1.para)<-c("low.level","high.level","weight")
L1.para1<-data.frame(L1.para[L1.para[,2] != "no",])#me devuelve un subset de datos con las int
L1.parasitoid[[i]]<-L1.para1
L1.parasitoid
## This could be shortened to this:
herb_en_motif_alt <- INT[INT$lower.taxon == "pl1",]
herb_en_motif_alt <- herb_en_motif_alt[c(2,3,7)]
herb_en_motif_alt
